// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/cluster": {
            "get": {
                "description": "Retrieve a paginated list of cluster that the user has access",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Retrieve a list of rabbitmq clusters registered",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "name": "PageNumber",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "name": "PageSize",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "post": {
                "description": "Create a new \u003cb\u003eRabbitMQ\u003c/b\u003e cluster. The credential provider must be valid and the cluster operational",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Register a new RabbitMQ Cluster",
                "parameters": [
                    {
                        "description": "Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contracts.CreateClusterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/cluster/exists": {
            "get": {
                "description": "Check if exists an rabbitmq cluster with host es",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Verify if exists a rabbitmqcluster",
                "parameters": [
                    {
                        "type": "string",
                        "name": "Host",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "name": "Port",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/cluster/{clusterId}": {
            "get": {
                "description": "Retrieve a single rabbitmq cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Retrieve a single rabbitmq cluster",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id of a cluster to be retrived",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.ClusterModel"
                        }
                    }
                }
            },
            "delete": {
                "description": "Soft delete a cluster will not completly erase from database, but will not show up anymore in the",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Soft delete a cluster",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id of a cluster to be soft deleted",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/{clusterId}/exchange": {
            "get": {
                "description": "List all exchanges from cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "List all exchanges from cluster",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cluster id from where retrieve exchanges",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "number"
                        }
                    }
                }
            },
            "post": {
                "description": "List all exchanges from cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "List all exchanges from cluster",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cluster id from where retrieve exchanges",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request",
                        "name": "CreateExchangeDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateExchangeDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "number"
                        }
                    }
                }
            }
        },
        "/{clusterId}/exchange/import": {
            "post": {
                "description": "Import an exchange from cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Import an exchange from cluster",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cluster id from where retrieve exchanges",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request",
                        "name": "ImportExchangeRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ImportExchangeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "number"
                        }
                    }
                }
            }
        },
        "/{clusterId}/exchange/{exchangeId}": {
            "delete": {
                "description": "List all exchanges from cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "List all exchanges from cluster",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cluster id from where retrieve exchanges",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Exchange id from database that will be deleted from cluster",
                        "name": "exchangeId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "number"
                        }
                    }
                }
            }
        },
        "/{clusterId}/exchange/{exchangeId}/syncronize": {
            "post": {
                "description": "Syncronize a exchange between cluster and database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Syncronize a exchange between cluster and database",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cluster id from where retrieve exchanges",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Exchange id from database that will be deleted from cluster",
                        "name": "exchangeId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "number"
                        }
                    }
                }
            }
        },
        "/{clusterId}/locker/{lockerType}/{artifactId}": {
            "get": {
                "description": "Retrieve a specific locker from a artificat in a cluster based on lockerType and artifactId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Locker"
                ],
                "summary": "Retrieve a specific locker from a artificat in a cluster based on lockerType and artifactId",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cluster id from where retrieve users",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Artifact name from where retrieve users",
                        "name": "lockerType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Artifact id from where retrieve users",
                        "name": "artifactId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "Some"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Create a locker for a specific artifact in a cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Locker"
                ],
                "summary": "Create a locker for a specific artifact in a cluster",
                "parameters": [
                    {
                        "description": "Request",
                        "name": "CreateLockerRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateLockerRequest"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "Cluster id from where retrieve users",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Artifact name from where retrieve users",
                        "name": "lockerType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Artifact id from where retrieve users",
                        "name": "artifactId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/{clusterId}/locker/{lockerType}/{lockerId}": {
            "delete": {
                "description": "Disable a specific locker from a artificat in a cluster based on lockerType and artifactId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Locker"
                ],
                "summary": "Disable a specific locker from a artificat in a cluster based on lockerType and artifactId",
                "parameters": [
                    {
                        "description": "Request",
                        "name": "DisableLockerRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DisableLockerRequest"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "Cluster id from where retrieve users",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Artifact name from where retrieve users",
                        "name": "lockerType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Id of the locker to be disable",
                        "name": "lockerId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "Some"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/{clusterId}/queue/import": {
            "post": {
                "description": "Import existing queue from cluster or creater another one",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Queue"
                ],
                "summary": "Import or create queue",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cluster id from where retrieve users",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request",
                        "name": "QueueImportRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.QueueImportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/{clusterId}/queue/queuesfromcluster": {
            "get": {
                "description": "Retrieve all users that exist on rabbit cluster. Event if it its registered in ostern",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Queue"
                ],
                "summary": "Retrieve all users from rabbitmq cluster",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cluster id from where retrieve users",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/{clusterId}/queue/remove": {
            "delete": {
                "description": "Remove a fila do cluster mas nao altera o cadastro no ostern",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Queue"
                ],
                "summary": "Remove a fila do cluster",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cluster id",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request",
                        "name": "QueueImportRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.QueueRemoveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/{clusterId}/queue/syncronize": {
            "post": {
                "description": "Create a queue in a cluster that not exist in cluster but is registered in ostern",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Queue"
                ],
                "summary": "Syncronize a queue between cluster and ostern",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cluster id",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request",
                        "name": "QueueImportRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.QueueSycronizeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/{clusterId}/queue/{queueId}": {
            "get": {
                "description": "Retrieve a queue from cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Queue"
                ],
                "summary": "Retriave a queue from cluster",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cluster id",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Queue id",
                        "name": "queueId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/{clusterId}/user": {
            "get": {
                "description": "Retrieve all users that exist on rabbit cluster. Event if it its registered in ostern",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Retrieve all users from rabbitmq cluster",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cluster id from where retrieve users",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Create a new \u003cb\u003eRabbitMQ User mirror\u003c/b\u003e from the broker. The user must exist in the cluster, the login and hashpassword will be imported",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Syncronize a existing RabbitMQ user from the broker.",
                "parameters": [
                    {
                        "description": "Request",
                        "name": "ImportOrCreateUserRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ImportOrCreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/{clusterId}/user/{userId}": {
            "get": {
                "description": "Recovery the details of a specific mirror user that is already imported from the cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Retrieve a mirror user from broker",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User id registered",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Cluster from where the user is",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "description": "Delete a mirrored user from the registry, the user will not be deleted from the cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete a mirror user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User id registered",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Cluster id from where delete user",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/{clusterId}/user/{userId}/syncronize": {
            "post": {
                "description": "Cria um ususario que esteja na base do ostern e nao exista no cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Sincronize um ususario no rabbitmq",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cluster id from where retrieve users",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User id registered",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/{clusterId}/virtualhost": {
            "get": {
                "description": "Retrieve all virtual hosts from cluster and database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VirtualHost"
                ],
                "summary": "Retrieve all virtual hosts from cluster and database",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cluster id from where retrieve virtualhost",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/{clusterId}/virtualhost/import": {
            "post": {
                "description": "Import  a new VirtualHost",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VirtualHost"
                ],
                "summary": "Import a new VirtualHost",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cluster id from where retrieve virtualhost",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request",
                        "name": "ImportVirtualHostRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ImportVirtualHostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/{clusterId}/virtualhost/{virtualHostId}": {
            "delete": {
                "description": "Delete a virtualhost from cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VirtualHost"
                ],
                "summary": "Delete a virtualhost from cluster",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cluster id from where retrieve virtualhost",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "VirtualHost id from database to delete",
                        "name": "virtualHostId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/{clusterId}/virtualhost/{virtualHostId}/syncronize": {
            "post": {
                "description": "Syncronize a virtualhost from database with cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VirtualHost"
                ],
                "summary": "Syncronize a virtualhost from database with cluster",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cluster id from where retrieve virtualhost",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "VirtualHost id from database to delete",
                        "name": "virtualHostId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "contracts.CreateClusterRequest": {
            "type": "object",
            "required": [
                "description",
                "host",
                "name",
                "password",
                "port",
                "user"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "db.ClusterModel": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "DeletedAt": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Exchanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.ExchangeModel"
                    }
                },
                "Host": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer"
                },
                "Name": {
                    "type": "string"
                },
                "Password": {
                    "type": "string"
                },
                "Port": {
                    "type": "integer"
                },
                "Queues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.QueueModel"
                    }
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "User": {
                    "type": "string"
                },
                "Users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.UserModel"
                    }
                },
                "VirtualHosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.VirtualHostModel"
                    }
                }
            }
        },
        "db.ExchangeModel": {
            "type": "object",
            "properties": {
                "Arguments": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "Cluster": {
                    "$ref": "#/definitions/db.ClusterModel"
                },
                "ClusterId": {
                    "type": "integer"
                },
                "Durable": {
                    "type": "boolean"
                },
                "Id": {
                    "type": "integer"
                },
                "Internal": {
                    "type": "boolean"
                },
                "Lockers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.LockerExchangeModel"
                    }
                },
                "Name": {
                    "type": "string"
                },
                "Type": {
                    "type": "string"
                }
            }
        },
        "db.LockerExchangeModel": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "Enabled": {
                    "type": "boolean"
                },
                "Exchange": {
                    "$ref": "#/definitions/db.ExchangeModel"
                },
                "ExchangeId": {
                    "type": "integer"
                },
                "Id": {
                    "type": "integer"
                },
                "Reason": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "UserDisabled": {
                    "type": "string"
                },
                "UserResponsibleEmail": {
                    "type": "string"
                }
            }
        },
        "db.LockerQueueModel": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "Enabled": {
                    "type": "boolean"
                },
                "Id": {
                    "type": "integer"
                },
                "Queue": {
                    "$ref": "#/definitions/db.QueueModel"
                },
                "QueueId": {
                    "type": "integer"
                },
                "Reason": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "UserDisabled": {
                    "type": "string"
                },
                "UserResponsibleEmail": {
                    "type": "string"
                }
            }
        },
        "db.LockerUserModel": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "Enabled": {
                    "type": "boolean"
                },
                "Id": {
                    "type": "integer"
                },
                "Reason": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "User": {
                    "$ref": "#/definitions/db.UserModel"
                },
                "UserDisabled": {
                    "type": "string"
                },
                "UserId": {
                    "type": "integer"
                },
                "UserResponsibleEmail": {
                    "type": "string"
                }
            }
        },
        "db.LockerVirtualHostModel": {
            "type": "object",
            "properties": {
                "Enabled": {
                    "type": "boolean"
                },
                "Id": {
                    "type": "integer"
                },
                "Reason": {
                    "type": "string"
                },
                "UserDisabled": {
                    "type": "string"
                },
                "UserResponsibleEmail": {
                    "type": "string"
                },
                "VirtualHost": {
                    "$ref": "#/definitions/db.VirtualHostModel"
                },
                "VirtualHostId": {
                    "type": "integer"
                }
            }
        },
        "db.QueueModel": {
            "type": "object",
            "properties": {
                "Arguments": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "Cluster": {
                    "$ref": "#/definitions/db.ClusterModel"
                },
                "ClusterId": {
                    "type": "integer"
                },
                "CreatedAt": {
                    "type": "string"
                },
                "DeletedAt": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Durable": {
                    "type": "boolean"
                },
                "Id": {
                    "type": "integer"
                },
                "LockerQueues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.LockerQueueModel"
                    }
                },
                "Name": {
                    "type": "string"
                },
                "Type": {
                    "$ref": "#/definitions/db.QueueType"
                },
                "UpdatedAt": {
                    "type": "string"
                }
            }
        },
        "db.QueueType": {
            "type": "string",
            "enum": [
                "classic",
                "quorum",
                "stream"
            ],
            "x-enum-varnames": [
                "QueueTypeClassic",
                "QueueTypeQuorum",
                "QueueTypeStream"
            ]
        },
        "db.UserModel": {
            "type": "object",
            "properties": {
                "Cluster": {
                    "$ref": "#/definitions/db.ClusterModel"
                },
                "ClusterId": {
                    "type": "integer"
                },
                "CreatedAt": {
                    "type": "string"
                },
                "DeletedAt": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer"
                },
                "LockerUser": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.LockerUserModel"
                    }
                },
                "PasswordHash": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            }
        },
        "db.VirtualHostModel": {
            "type": "object",
            "properties": {
                "Cluster": {
                    "$ref": "#/definitions/db.ClusterModel"
                },
                "ClusterId": {
                    "type": "integer"
                },
                "DefaultQueueType": {
                    "$ref": "#/definitions/db.QueueType"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer"
                },
                "Lockers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.LockerVirtualHostModel"
                    }
                },
                "Name": {
                    "type": "string"
                },
                "Tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "dto.CreateExchangeDto": {
            "type": "object",
            "properties": {
                "Arguments": {
                    "type": "object",
                    "additionalProperties": true
                },
                "Durable": {
                    "type": "boolean"
                },
                "Internal": {
                    "type": "boolean"
                },
                "Name": {
                    "type": "string"
                },
                "Type": {
                    "type": "string"
                }
            }
        },
        "dto.CreateLockerRequest": {
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string"
                },
                "responsible": {
                    "type": "string"
                }
            }
        },
        "dto.DisableLockerRequest": {
            "type": "object",
            "properties": {
                "responsible": {
                    "type": "string"
                }
            }
        },
        "dto.ImportExchangeRequest": {
            "type": "object",
            "properties": {
                "Name": {
                    "type": "string"
                }
            }
        },
        "dto.ImportOrCreateUserRequest": {
            "type": "object",
            "required": [
                "ClusterId",
                "Username"
            ],
            "properties": {
                "ClusterId": {
                    "type": "integer"
                },
                "Create": {
                    "type": "boolean"
                },
                "Password": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            }
        },
        "dto.ImportVirtualHostRequest": {
            "type": "object",
            "required": [
                "Name"
            ],
            "properties": {
                "Name": {
                    "type": "string"
                }
            }
        },
        "dto.QueueImportRequest": {
            "type": "object",
            "properties": {
                "QueueName": {
                    "type": "string"
                },
                "Type": {
                    "type": "string"
                }
            }
        },
        "dto.QueueRemoveRequest": {
            "type": "object",
            "properties": {
                "QueueId": {
                    "type": "integer"
                }
            }
        },
        "dto.QueueSycronizeRequest": {
            "type": "object",
            "properties": {
                "QueueId": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
