{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/broker": {
            "get": {
                "description": "Retrieve a paginated list of cluster that the user has access",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Broker"
                ],
                "summary": "Retrieve a list of rabbitmq clusters registered",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "name": "PageNumber",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "name": "PageSize",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/contracts.PaginatedResult-entities_BrokerEntity"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new \u003cb\u003eRabbitMQ\u003c/b\u003e broker. The credential provider must be valid and the cluster operational",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Broker"
                ],
                "summary": "Register a new RabbitMQ Broker",
                "parameters": [
                    {
                        "description": "Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contracts.CreateBrokerRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/broker/exists": {
            "get": {
                "description": "Check if exists an rabbitmq cluster with host es",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Broker"
                ],
                "summary": "Verify if exists a rabbitmqcluster",
                "parameters": [
                    {
                        "type": "string",
                        "name": "Host",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "name": "Port",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/broker/{brokerId}": {
            "get": {
                "description": "Retrieve a single rabbitmq cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Broker"
                ],
                "summary": "Retrieve a single rabbitmq cluster",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id of a broker to be retrived",
                        "name": "brokerId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.BrokerEntity"
                        }
                    }
                }
            },
            "delete": {
                "description": "Soft delete a broker will not completly erase from database, but will not show up anymore in the",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Broker"
                ],
                "summary": "Soft delete a broker",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id of a broker to be soft deleted",
                        "name": "brokerId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "Create a new \u003cb\u003eRabbitMQ User mirror\u003c/b\u003e from the broker. The user must exist in the cluster, the login and hashpassword will be imported",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Syncronize a existing RabbitMQ user from the broker.",
                "parameters": [
                    {
                        "description": "Request",
                        "name": "ImportUserRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ImportUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/user/{userId}": {
            "get": {
                "description": "Recovery the details of a specific mirror user that is already imported from the cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Retrieve a mirror user from broker",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User id registered",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.UserEntity"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "description": "Delete a mirrored user from the registry, the user will not be deleted from the cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete a mirror user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User id registered",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "contracts.CreateBrokerRequest": {
            "type": "object",
            "required": [
                "description",
                "host",
                "name",
                "password",
                "port",
                "user"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "contracts.PaginatedResult-entities_BrokerEntity": {
            "type": "object",
            "properties": {
                "pageNumber": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.BrokerEntity"
                    }
                },
                "totalItems": {
                    "type": "integer"
                }
            }
        },
        "dto.ImportUserRequest": {
            "type": "object",
            "required": [
                "BrokerId",
                "Username"
            ],
            "properties": {
                "BrokerId": {
                    "type": "integer"
                },
                "Username": {
                    "type": "string"
                }
            }
        },
        "entities.BrokerEntity": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "description": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "entities.UserEntity": {
            "type": "object",
            "properties": {
                "Broker": {
                    "$ref": "#/definitions/entities.BrokerEntity"
                },
                "BrokerId": {
                    "type": "integer"
                },
                "PasswordHash": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        }
    }
}