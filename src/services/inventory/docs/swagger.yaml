definitions:
  contracts.CreateClusterRequest:
    properties:
      description:
        type: string
      host:
        type: string
      name:
        type: string
      password:
        type: string
      port:
        type: integer
      user:
        type: string
    required:
    - description
    - host
    - name
    - password
    - port
    - user
    type: object
  db.ClusterModel:
    properties:
      CreatedAt:
        type: string
      DeletedAt:
        type: string
      Description:
        type: string
      Exchanges:
        items:
          $ref: '#/definitions/db.ExchangeModel'
        type: array
      Host:
        type: string
      Id:
        type: integer
      Name:
        type: string
      Password:
        type: string
      Port:
        type: integer
      Queues:
        items:
          $ref: '#/definitions/db.QueueModel'
        type: array
      UpdatedAt:
        type: string
      User:
        type: string
      Users:
        items:
          $ref: '#/definitions/db.UserModel'
        type: array
      VirtualHosts:
        items:
          $ref: '#/definitions/db.VirtualHostModel'
        type: array
    type: object
  db.ExchangeModel:
    properties:
      Arguments:
        items:
          type: integer
        type: array
      Cluster:
        $ref: '#/definitions/db.ClusterModel'
      ClusterId:
        type: integer
      Durable:
        type: boolean
      Id:
        type: integer
      Internal:
        type: boolean
      Lockers:
        items:
          $ref: '#/definitions/db.LockerExchangeModel'
        type: array
      Name:
        type: string
      Type:
        type: string
    type: object
  db.LockerExchangeModel:
    properties:
      CreatedAt:
        type: string
      Enabled:
        type: boolean
      Exchange:
        $ref: '#/definitions/db.ExchangeModel'
      ExchangeId:
        type: integer
      Id:
        type: integer
      Reason:
        type: string
      UpdatedAt:
        type: string
      UserDisabled:
        type: string
      UserResponsibleEmail:
        type: string
    type: object
  db.LockerQueueModel:
    properties:
      CreatedAt:
        type: string
      Enabled:
        type: boolean
      Id:
        type: integer
      Queue:
        $ref: '#/definitions/db.QueueModel'
      QueueId:
        type: integer
      Reason:
        type: string
      UpdatedAt:
        type: string
      UserDisabled:
        type: string
      UserResponsibleEmail:
        type: string
    type: object
  db.LockerUserModel:
    properties:
      CreatedAt:
        type: string
      Enabled:
        type: boolean
      Id:
        type: integer
      Reason:
        type: string
      UpdatedAt:
        type: string
      User:
        $ref: '#/definitions/db.UserModel'
      UserDisabled:
        type: string
      UserId:
        type: integer
      UserResponsibleEmail:
        type: string
    type: object
  db.LockerVirtualHostModel:
    properties:
      Enabled:
        type: boolean
      Id:
        type: integer
      Reason:
        type: string
      UserDisabled:
        type: string
      UserResponsibleEmail:
        type: string
      VirtualHost:
        $ref: '#/definitions/db.VirtualHostModel'
      VirtualHostId:
        type: integer
    type: object
  db.QueueModel:
    properties:
      Arguments:
        items:
          type: integer
        type: array
      Cluster:
        $ref: '#/definitions/db.ClusterModel'
      ClusterId:
        type: integer
      CreatedAt:
        type: string
      DeletedAt:
        type: string
      Description:
        type: string
      Durable:
        type: boolean
      Id:
        type: integer
      LockerQueues:
        items:
          $ref: '#/definitions/db.LockerQueueModel'
        type: array
      Name:
        type: string
      Type:
        $ref: '#/definitions/db.QueueType'
      UpdatedAt:
        type: string
    type: object
  db.QueueType:
    enum:
    - CLASSIC
    - QUORUM
    - STREAM
    type: string
    x-enum-varnames:
    - QueueTypeClassic
    - QueueTypeQuorum
    - QueueTypeStream
  db.UserModel:
    properties:
      Cluster:
        $ref: '#/definitions/db.ClusterModel'
      ClusterId:
        type: integer
      CreatedAt:
        type: string
      DeletedAt:
        type: string
      Id:
        type: integer
      LockerUser:
        items:
          $ref: '#/definitions/db.LockerUserModel'
        type: array
      PasswordHash:
        type: string
      UpdatedAt:
        type: string
      Username:
        type: string
    type: object
  db.VirtualHostModel:
    properties:
      Cluster:
        $ref: '#/definitions/db.ClusterModel'
      ClusterId:
        type: integer
      DefaultQueueType:
        $ref: '#/definitions/db.QueueType'
      Description:
        type: string
      Id:
        type: integer
      Lockers:
        items:
          $ref: '#/definitions/db.LockerVirtualHostModel'
        type: array
      Name:
        type: string
      Tags:
        items:
          type: integer
        type: array
    type: object
  dto.CreateExchangeDto:
    properties:
      Arguments:
        additionalProperties: true
        type: object
      Durable:
        type: boolean
      Internal:
        type: boolean
      Name:
        type: string
      Type:
        type: string
    type: object
  dto.CreateLockerRequest:
    properties:
      reason:
        type: string
      responsible:
        type: string
    type: object
  dto.DisableLockerRequest:
    properties:
      responsible:
        type: string
    type: object
  dto.ImportExchangeRequest:
    properties:
      Name:
        type: string
    type: object
  dto.ImportOrCreateUserRequest:
    properties:
      ClusterId:
        type: integer
      Create:
        type: boolean
      Password:
        type: string
      Username:
        type: string
    required:
    - ClusterId
    - Username
    type: object
  dto.ImportVirtualHostRequest:
    properties:
      Name:
        type: string
    required:
    - Name
    type: object
  dto.QueueImportRequest:
    properties:
      QueueName:
        type: string
      Type:
        type: string
    type: object
  dto.QueueRemoveRequest:
    properties:
      QueueId:
        type: integer
    type: object
  dto.QueueSycronizeRequest:
    properties:
      QueueId:
        type: integer
    type: object
info:
  contact: {}
paths:
  /{clusterId}/exchange:
    get:
      consumes:
      - application/json
      description: List all exchanges from cluster
      parameters:
      - description: Cluster id from where retrieve exchanges
        in: path
        name: clusterId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: number
      summary: List all exchanges from cluster
      tags:
      - Exchange
    post:
      consumes:
      - application/json
      description: List all exchanges from cluster
      parameters:
      - description: Cluster id from where retrieve exchanges
        in: path
        name: clusterId
        required: true
        type: integer
      - description: Request
        in: body
        name: CreateExchangeDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateExchangeDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: number
      summary: List all exchanges from cluster
      tags:
      - Exchange
  /{clusterId}/exchange/{exchangeId}:
    delete:
      consumes:
      - application/json
      description: List all exchanges from cluster
      parameters:
      - description: Cluster id from where retrieve exchanges
        in: path
        name: clusterId
        required: true
        type: integer
      - description: Exchange id from database that will be deleted from cluster
        in: path
        name: exchangeId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: number
      summary: List all exchanges from cluster
      tags:
      - Exchange
  /{clusterId}/exchange/{exchangeId}/syncronize:
    post:
      consumes:
      - application/json
      description: Syncronize a exchange between cluster and database
      parameters:
      - description: Cluster id from where retrieve exchanges
        in: path
        name: clusterId
        required: true
        type: integer
      - description: Exchange id from database that will be deleted from cluster
        in: path
        name: exchangeId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: number
      summary: Syncronize a exchange between cluster and database
      tags:
      - Exchange
  /{clusterId}/exchange/import:
    post:
      consumes:
      - application/json
      description: Import an exchange from cluster
      parameters:
      - description: Cluster id from where retrieve exchanges
        in: path
        name: clusterId
        required: true
        type: integer
      - description: Request
        in: body
        name: ImportExchangeRequest
        required: true
        schema:
          $ref: '#/definitions/dto.ImportExchangeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: number
      summary: Import an exchange from cluster
      tags:
      - Exchange
  /{clusterId}/locker/{lockerType}/{artifactId}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific locker from a artificat in a cluster based
        on lockerType and artifactId
      parameters:
      - description: Cluster id from where retrieve users
        in: path
        name: clusterId
        required: true
        type: integer
      - description: Artifact name from where retrieve users
        in: path
        name: lockerType
        required: true
        type: string
      - description: Artifact id from where retrieve users
        in: path
        name: artifactId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: Some
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Retrieve a specific locker from a artificat in a cluster based on lockerType
        and artifactId
      tags:
      - Locker
    post:
      consumes:
      - application/json
      description: Create a locker for a specific artifact in a cluster
      parameters:
      - description: Request
        in: body
        name: CreateLockerRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CreateLockerRequest'
      - description: Cluster id from where retrieve users
        in: path
        name: clusterId
        required: true
        type: integer
      - description: Artifact name from where retrieve users
        in: path
        name: lockerType
        required: true
        type: string
      - description: Artifact id from where retrieve users
        in: path
        name: artifactId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Create a locker for a specific artifact in a cluster
      tags:
      - Locker
  /{clusterId}/locker/{lockerType}/{lockerId}:
    delete:
      consumes:
      - application/json
      description: Disable a specific locker from a artificat in a cluster based on
        lockerType and artifactId
      parameters:
      - description: Request
        in: body
        name: DisableLockerRequest
        required: true
        schema:
          $ref: '#/definitions/dto.DisableLockerRequest'
      - description: Cluster id from where retrieve users
        in: path
        name: clusterId
        required: true
        type: integer
      - description: Artifact name from where retrieve users
        in: path
        name: lockerType
        required: true
        type: string
      - description: Id of the locker to be disable
        in: path
        name: lockerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: Some
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Disable a specific locker from a artificat in a cluster based on lockerType
        and artifactId
      tags:
      - Locker
  /{clusterId}/queue/{queueId}:
    get:
      consumes:
      - application/json
      description: Retrieve a queue from cluster
      parameters:
      - description: Cluster id
        in: path
        name: clusterId
        required: true
        type: integer
      - description: Queue id
        in: path
        name: queueId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Retriave a queue from cluster
      tags:
      - Queue
  /{clusterId}/queue/import:
    post:
      consumes:
      - application/json
      description: Import existing queue from cluster or creater another one
      parameters:
      - description: Cluster id from where retrieve users
        in: path
        name: clusterId
        required: true
        type: integer
      - description: Request
        in: body
        name: QueueImportRequest
        required: true
        schema:
          $ref: '#/definitions/dto.QueueImportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Import or create queue
      tags:
      - Queue
  /{clusterId}/queue/queuesfromcluster:
    get:
      consumes:
      - application/json
      description: Retrieve all users that exist on rabbit cluster. Event if it its
        registered in ostern
      parameters:
      - description: Cluster id from where retrieve users
        in: path
        name: clusterId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Retrieve all users from rabbitmq cluster
      tags:
      - Queue
  /{clusterId}/queue/remove:
    delete:
      consumes:
      - application/json
      description: Remove a fila do cluster mas nao altera o cadastro no ostern
      parameters:
      - description: Cluster id
        in: path
        name: clusterId
        required: true
        type: integer
      - description: Request
        in: body
        name: QueueImportRequest
        required: true
        schema:
          $ref: '#/definitions/dto.QueueRemoveRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Remove a fila do cluster
      tags:
      - Queue
  /{clusterId}/queue/syncronize:
    post:
      consumes:
      - application/json
      description: Create a queue in a cluster that not exist in cluster but is registered
        in ostern
      parameters:
      - description: Cluster id
        in: path
        name: clusterId
        required: true
        type: integer
      - description: Request
        in: body
        name: QueueImportRequest
        required: true
        schema:
          $ref: '#/definitions/dto.QueueSycronizeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Syncronize a queue between cluster and ostern
      tags:
      - Queue
  /{clusterId}/user:
    get:
      consumes:
      - application/json
      description: Retrieve all users that exist on rabbit cluster. Event if it its
        registered in ostern
      parameters:
      - description: Cluster id from where retrieve users
        in: path
        name: clusterId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Retrieve all users from rabbitmq cluster
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create a new <b>RabbitMQ User mirror</b> from the broker. The user
        must exist in the cluster, the login and hashpassword will be imported
      parameters:
      - description: Request
        in: body
        name: ImportOrCreateUserRequest
        required: true
        schema:
          $ref: '#/definitions/dto.ImportOrCreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: number
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Syncronize a existing RabbitMQ user from the broker.
      tags:
      - User
  /{clusterId}/user/{userId}:
    delete:
      consumes:
      - application/json
      description: Delete a mirrored user from the registry, the user will not be
        deleted from the cluster
      parameters:
      - description: User id registered
        in: path
        name: userId
        required: true
        type: integer
      - description: Cluster id from where delete user
        in: path
        name: clusterId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Delete a mirror user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Recovery the details of a specific mirror user that is already
        imported from the cluster
      parameters:
      - description: User id registered
        in: path
        name: userId
        required: true
        type: integer
      - description: Cluster from where the user is
        in: path
        name: clusterId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Retrieve a mirror user from broker
      tags:
      - User
  /{clusterId}/user/{userId}/syncronize:
    post:
      consumes:
      - application/json
      description: Cria um ususario que esteja na base do ostern e nao exista no cluster
      parameters:
      - description: Cluster id from where retrieve users
        in: path
        name: clusterId
        required: true
        type: integer
      - description: User id registered
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: number
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Sincronize um ususario no rabbitmq
      tags:
      - User
  /{clusterId}/virtualhost:
    get:
      consumes:
      - application/json
      description: Retrieve all virtual hosts from cluster and database
      parameters:
      - description: Cluster id from where retrieve virtualhost
        in: path
        name: clusterId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Retrieve all virtual hosts from cluster and database
      tags:
      - VirtualHost
  /{clusterId}/virtualhost/import:
    post:
      consumes:
      - application/json
      description: Import  a new VirtualHost
      parameters:
      - description: Cluster id from where retrieve virtualhost
        in: path
        name: clusterId
        required: true
        type: integer
      - description: Request
        in: body
        name: ImportVirtualHostRequest
        required: true
        schema:
          $ref: '#/definitions/dto.ImportVirtualHostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "201":
          description: Created
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Import a new VirtualHost
      tags:
      - VirtualHost
  /cluster:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of cluster that the user has access
      parameters:
      - default: 1
        in: query
        name: PageNumber
        required: true
        type: integer
      - default: 10
        in: query
        name: PageSize
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Retrieve a list of rabbitmq clusters registered
      tags:
      - Cluster
    post:
      consumes:
      - application/json
      description: Create a new <b>RabbitMQ</b> cluster. The credential provider must
        be valid and the cluster operational
      parameters:
      - description: Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contracts.CreateClusterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
      summary: Register a new RabbitMQ Cluster
      tags:
      - Cluster
  /cluster/{clusterId}:
    delete:
      consumes:
      - application/json
      description: Soft delete a cluster will not completly erase from database, but
        will not show up anymore in the
      parameters:
      - description: Id of a cluster to be soft deleted
        in: path
        name: clusterId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: boolean
      summary: Soft delete a cluster
      tags:
      - Cluster
    get:
      consumes:
      - application/json
      description: Retrieve a single rabbitmq cluster
      parameters:
      - description: Id of a cluster to be retrived
        in: path
        name: clusterId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.ClusterModel'
      summary: Retrieve a single rabbitmq cluster
      tags:
      - Cluster
  /cluster/exists:
    get:
      consumes:
      - application/json
      description: Check if exists an rabbitmq cluster with host es
      parameters:
      - in: query
        name: Host
        required: true
        type: string
      - in: query
        name: Port
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Verify if exists a rabbitmqcluster
      tags:
      - Cluster
swagger: "2.0"
