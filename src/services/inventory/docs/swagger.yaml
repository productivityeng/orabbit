definitions:
  contracts.CreateBrokerRequest:
    properties:
      description:
        type: string
      host:
        type: string
      name:
        type: string
      password:
        type: string
      port:
        type: integer
      user:
        type: string
    required:
    - description
    - host
    - name
    - password
    - port
    - user
    type: object
  contracts.PaginatedResult-entities_BrokerEntity:
    properties:
      pageNumber:
        type: integer
      pageSize:
        type: integer
      result:
        items:
          $ref: '#/definitions/entities.BrokerEntity'
        type: array
      totalItems:
        type: integer
    type: object
  entities.BrokerEntity:
    properties:
      createdAt:
        type: string
      description:
        type: string
      host:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      port:
        type: integer
      updatedAt:
        type: string
      user:
        type: string
    type: object
info:
  contact: {}
paths:
  /broker:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of cluster that the user has access
      parameters:
      - in: query
        name: PageNumber
        required: true
        type: integer
      - in: query
        name: PageSize
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contracts.PaginatedResult-entities_BrokerEntity'
      summary: Retrieve a list of rabbitmq clusters registered
      tags:
      - Broker
    post:
      consumes:
      - application/json
      description: Create a new <b>RabbitMQ</b> broker. The credential provider must
        be valid and the cluster operational
      parameters:
      - description: Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contracts.CreateBrokerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
      summary: Register a new RabbitMQ Broker
      tags:
      - Broker
  /broker/{brokerId}:
    delete:
      consumes:
      - application/json
      description: Soft delete a broker will not completly erase from database, but
        will not show up anymore in the
      parameters:
      - description: Id of a broker to be soft deleted
        in: path
        name: brokerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: boolean
      summary: Soft delete a broker
      tags:
      - Broker
swagger: "2.0"
