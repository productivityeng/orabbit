datasource db {
    provider = "mysql"
    url      = "mysql://root:password@localhost:3306/inventory"
}

generator db {
    provider = "go run github.com/steebchen/prisma-client-go"
}

model Cluster {
    Id Int @id @default(autoincrement()) @map("ID")
    Name String @map("TX_NAME")
    Description String @map("TX_DESCRIPTION")
    Host String @map("TX_HOST")
    Port Int @map("NM_PORT")
    User String @map("TX_USER")
    Password String @map("TX_PASSWORD")

    UpdatedAt DateTime @updatedAt @map("DT_UPDATED_AT")
    CreatedAt DateTime @default(now()) @map("DT_CREATED_AT")
    DeletedAt DateTime? @map("DT_DELETED_AT")

    Users User[]
    VirtualHosts VirtualHost[]
    Queues Queue[]
    Exchanges Exchange[] 

    @@unique([Host, Port],name: "UNIQUE_NAME_HOST_PORT")
    @@map("TB_CLUSTER")
}

model VirtualHost {
    Id Int @id @default(autoincrement())
    Name String @map("TX_NAME") @unique
    Description String @map("TX_DESCRIPTION")
    ClusterId Int @map("FK_CLUSTER_ID")
    Cluster Cluster @relation(fields: [ClusterId], references: [Id],onDelete: Cascade)

    UpdatedAt DateTime @updatedAt @map("DT_UPDATED_AT")
    CreatedAt DateTime @default(now()) @map("DT_CREATED_AT")
    DeletedAt DateTime? @map("DT_DELETED_AT")

    @@map("TB_VIRTUALHOST")
}

enum QueueType {
    CLASSIC
    QUORUM
}

model Queue {
    Id Int @id @default(autoincrement()) @map("ID")
    Name String @map("TX_NAME") @unique()
    Description String @map("TX_DESCRIPTION")
    Durable Boolean @map("IS_DURABLE")
    Arguments Json @map("JS_ARGUMENTS")
    Type QueueType @map("TY_QUEUE_TYPE")

    ClusterId Int @map("FK_CLUSTER_ID")
    Cluster Cluster @relation(fields: [ClusterId], references: [Id],onDelete: Cascade)


    UpdatedAt DateTime @updatedAt @map("DT_UPDATED_AT")
    CreatedAt DateTime @default(now()) @map("DT_CREATED_AT")
    DeletedAt DateTime? @map("DT_DELETED_AT")

    LockerQueues LockerQueue[]

    @@unique([Name, ClusterId],name: "UNIQUE_NAME_CLUSTERID")
    @@map("TB_QUEUE")
}

model User {
    Id      Int     @id @default(autoincrement()) @map("ID")
    Username String  @unique @map("TX_USERNAME")
    PasswordHash String @map("TX_PASSWORD_HASH")
    ClusterId Int @map("FK_CLUSTER_ID")
    Cluster Cluster @relation(fields: [ClusterId], references: [Id],onDelete: Cascade)

    UpdatedAt DateTime @updatedAt @map("DT_UPDATED_AT")
    CreatedAt DateTime @default(now()) @map("DT_CREATED_AT")
    DeletedAt DateTime? @map("DT_DELETED_AT")

    LockerUser LockerUser[]

    @@map("TB_USER")
    @@unique([Username, ClusterId],name: "UNIQUE_USERNAME_CLUSTERID")
    @@unique([Id, ClusterId],name: "UNIQUE_ID_CLUSTERID")
}


model Exchange {
    Id Int @id @default(autoincrement()) @map("ID")

    ClusterId Int @map("FK_CLUSTER_ID")
    Cluster Cluster @relation(fields: [ClusterId], references: [Id],onDelete: Cascade)
    Name String @map("TX_NAME")  @unique
    Internal Boolean @map("IS_INTERNAL")
    Durable Boolean @map("IS_DURABLE")
    Arguments Json @map("JS_ARGUMENTS")
    Lockers LockerExchange[]
    Type String @map("TX__TYPE")
    
    @@unique([ClusterId, Name],name: "UNIQUE_CLUSTERID_NAME")
    @@map("TB_EXCHANGE")

}


model LockerExchange {
    Id Int @id @default(autoincrement()) @map("ID")

    ExchangeId Int @map("FK_EXCHANGE_ID")
    Exchange Exchange @relation(fields: [ExchangeId], references: [Id],onDelete: Cascade)

    Enabled Boolean @map("IS_ENABLED")
    Reason String @map("TX_REASON")

    CreatedAt DateTime @default(now()) @map("DT_CREATED_AT")
    UpdatedAt DateTime @updatedAt @map("DT_UPDATED_AT")
    UserResponsibleEmail String @map("TX_USER_RESPONSIBLE_EMAIL")
    UserDisabled String? @map("TX_USER_DISABLED")
}


model LockerQueue {
    Id Int @id @default(autoincrement()) @map("ID")

    QueueId Int @map("FK_QUEUE_ID")
    Queue Queue @relation(fields: [QueueId], references: [Id],onDelete: Cascade)

    Enabled Boolean @map("IS_ENABLED")
    Reason String @map("TX_REASON")

    CreatedAt DateTime @default(now()) @map("DT_CREATED_AT")
    UpdatedAt DateTime @updatedAt @map("DT_UPDATED_AT")
    UserResponsibleEmail String @map("TX_USER_RESPONSIBLE_EMAIL")
    UserDisabled String? @map("TX_USER_DISABLED")


    @@map("TB_LOCKER_QUEUE")
}

model LockerUser {
    Id Int @id @default(autoincrement()) @map("ID")

    UserId Int @map("FK_USER_ID")
    User User @relation(fields: [UserId], references: [Id],onDelete: Cascade)

    Enabled Boolean @map("IS_ENABLED")
    Reason String @map("TX_REASON")

    CreatedAt DateTime @default(now()) @map("DT_CREATED_AT")
    UpdatedAt DateTime @updatedAt @map("DT_UPDATED_AT")
    UserResponsibleEmail String @map("TX_USER_RESPONSIBLE_EMAIL")
    UserDisabled String? @map("TX_USER_DISABLED")


    @@map("TB_LOCKER_USER")
}

